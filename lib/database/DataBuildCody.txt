-- Tạo bảng Users
CREATE TABLE Users (
    userID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(15),
    address VARCHAR(100),
    role ENUM('Patient', 'Doctor', 'Admin') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo bảng Doctors (liên kết với Users)
CREATE TABLE Doctors (
    doctorID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    specialization VARCHAR(100) NOT NULL,
    experience INT NOT NULL,
    working_hours VARCHAR(255),
    location VARCHAR(100),
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE
);

-- Tạo bảng Appointments
CREATE TABLE Appointments (
    appointmentID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    doctorID INT NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL,
    consultation_type ENUM('Online', 'In-Person') DEFAULT 'Online',
    note VARCHAR(100),
    status ENUM('Scheduled', 'Completed', 'Cancelled') DEFAULT 'Scheduled',
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE,
    FOREIGN KEY (doctorID) REFERENCES Doctors(doctorID) ON DELETE CASCADE
);

-- Tạo bảng Products
CREATE TABLE Products (
    productID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(100),
    price DECIMAL(10, 2) NOT NULL,
    stock INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tạo bảng Orders
CREATE TABLE Orders (
    orderID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    totalAmount DECIMAL(10, 2) NOT NULL,
    shipping_fee DECIMAL(10, 2) DEFAULT 0.00,
    discount_code VARCHAR(50),
    paymentStatus ENUM('Pending', 'Paid', 'Failed') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE
);

-- Tạo bảng OrderDetails
CREATE TABLE OrderDetails (
    orderDetailID INT AUTO_INCREMENT PRIMARY KEY,
    orderID INT NOT NULL,
    productID INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (orderID) REFERENCES Orders(orderID) ON DELETE CASCADE,
    FOREIGN KEY (productID) REFERENCES Products(productID) ON DELETE CASCADE
);

-- Tạo bảng Feedbacks (Đánh giá sản phẩm và dịch vụ)
CREATE TABLE Feedbacks (
    feedbackID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    doctorID INT,
    productID INT,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    comment VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE,
    FOREIGN KEY (doctorID) REFERENCES Doctors(doctorID) ON DELETE SET NULL,
    FOREIGN KEY (productID) REFERENCES Products(productID) ON DELETE SET NULL
);

-- Tạo bảng PaymentTransactions (Giao dịch thanh toán)
CREATE TABLE PaymentTransactions (
    transactionID INT AUTO_INCREMENT PRIMARY KEY,
    orderID INT NOT NULL,
    transaction_code VARCHAR(100) NOT NULL,
    payment_method ENUM('CreditCard', 'E-Wallet', 'BankTransfer') NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    status ENUM('Success', 'Failed') DEFAULT 'Success',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (orderID) REFERENCES Orders(orderID) ON DELETE CASCADE
);

-- Tạo bảng Notifications (Thông báo người dùng)
CREATE TABLE Notifications (
    notificationID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    message VARCHAR(100) NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE
);

INSERT INTO Users (id, username, email, password, created_at) VALUES
(1, 'john_doe', 'john.doe@example.com', 'password123', NOW()),
(2, 'jane_smith', 'jane.smith@example.com', 'password123', NOW()),
(3, 'michael_lee', 'michael.lee@example.com', 'password123', NOW()),
(4, 'susan_wong', 'susan.wong@example.com', 'password123', NOW()),
(5, 'alex_jones', 'alex.jones@example.com', 'password123', NOW());

INSERT INTO Doctors (id, name, specialty, phone, email, created_at) VALUES
(1, 'Dr. Emily Carter', 'Cardiologist', '123-456-7890', 'emily.carter@example.com', NOW()),
(2, 'Dr. Daniel Smith', 'Dentist', '123-456-7891', 'daniel.smith@example.com', NOW()),
(3, 'Dr. Sophia Johnson', 'Pediatrician', '123-456-7892', 'sophia.johnson@example.com', NOW()),
(4, 'Dr. Liam Brown', 'Orthopedic', '123-456-7893', 'liam.brown@example.com', NOW()),
(5, 'Dr. Olivia Martinez', 'Dermatologist', '123-456-7894', 'olivia.martinez@example.com', NOW());

INSERT INTO Products (id, name, category, price, stock, created_at) VALUES
(1, 'Blood Pressure Monitor', 'Medical Equipment', 49.99, 100, NOW()),
(2, 'Stethoscope', 'Medical Equipment', 29.99, 200, NOW()),
(3, 'Vitamin D Tablets', 'Supplements', 19.99, 300, NOW()),
(4, 'Face Mask (Pack of 50)', 'Safety Equipment', 9.99, 500, NOW()),
(5, 'Digital Thermometer', 'Medical Equipment', 14.99, 150, NOW());


